name: Quality Gate

on:
    pull_request:
        branches: [ main ]
        types: [ opened, synchronize, reopened ]

jobs:
    quality-gate:
        name: Quality Gate Analysis
        runs-on: ubuntu-latest
        permissions:
            contents: read
            pull-requests: write

        steps:
            -   uses: actions/checkout@v4
                with: { fetch-depth: 0 }

            -   uses: actions/setup-java@v4
                with:
                    java-version: '17'
                    distribution: temurin

            -   uses: gradle/actions/setup-gradle@v3
            -   run: chmod +x ./gradlew

            -   name: Clean Project
                run: ./gradlew clean

            -   name: Run Code Quality Checks
                run: ./gradlew detekt ktlintCheck   # <- o tu tarea 'codeQuality' si existe
                continue-on-error: true

            -   name: Run All Tests
                run: ./gradlew test --continue
                continue-on-error: true            # <- opcional segÃºn tu polÃ­tica

            -   name: Build Project
                run: ./gradlew assembleDebug        # <- o assemble si aplica
                continue-on-error: true             # <- opcional

            -   name: Generate Quality Report
                if: always()
                run: |
                    # ... (tu script tal cual) ...

            -   name: Upload Quality Report
                if: always()
                uses: actions/upload-artifact@v4
                with:
                    name: quality-report
                    path: quality-report.md
                    retention-days: 30

            -   name: Upload All Reports
                if: always()
                uses: actions/upload-artifact@v4
                with:
                    name: all-quality-reports
                    path: |
                        **/build/reports/
                        **/build/test-results/
                    retention-days: 30

            -   name: Comment PR with Quality Gate
                if: ${{ always() && github.event_name == 'pull_request' }}
                uses: actions/github-script@v7
                with:
                    github-token: ${{ secrets.GITHUB_TOKEN }}
                    script: |
                        const fs = require('fs');
                        let comment = '## ðŸš¦ Quality Gate Results\n\n';
                        try { comment += fs.readFileSync('quality-report.md','utf8'); }
                        catch { comment += 'Quality report generation failed. Check logs.\n'; }
                        comment += '\n---\n*Generated by MortApp CI/CD Pipeline* ðŸ¤–';
                        await github.rest.issues.createComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          issue_number: context.issue.number,
                          body: comment
                        });
